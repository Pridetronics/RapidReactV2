// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax m_frontLeftMotor;
private CANSparkMax m_frontRightMotor;
private CANSparkMax m_rearLeftMotor;
private CANSparkMax m_rearRightMotor;
private MecanumDrive mecanumDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Joystick m_joystickDriver;
    
    /**
    *
    */
    public Drive(Joystick joystickDriver) {
        m_joystickDriver = joystickDriver;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
m_frontLeftMotor = new CANSparkMax(1, MotorType.kBrushless);
//  addChild("frontLeftMotor",frontLeftMotor);
 m_frontLeftMotor.setInverted(false);

m_frontRightMotor = new CANSparkMax(0, MotorType.kBrushless);
//  addChild("frontRightMotor",frontRightMotor);
 m_frontRightMotor.setInverted(false);

m_rearLeftMotor = new CANSparkMax(2, MotorType.kBrushless);
//  addChild("backLeftMotor",backLeftMotor);
 m_rearLeftMotor.setInverted(false);

m_rearRightMotor = new CANSparkMax(3, MotorType.kBrushless);
//  addChild("backRightMotor",backRightMotor);
 m_rearRightMotor.setInverted(false);

mecanumDrive1 = new MecanumDrive(m_frontLeftMotor, m_rearLeftMotor,
m_frontRightMotor, m_rearRightMotor);
 addChild("Mecanum Drive 1",mecanumDrive1);
 mecanumDrive1.setSafetyEnabled(true);
mecanumDrive1.setExpiration(0.1);
mecanumDrive1.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void cartesianDrive(double yValue, double xValue, double zValue){
         yValue = m_joystickDriver.getY();
         xValue = m_joystickDriver.getX();
         zValue = m_joystickDriver.getZ();
        mecanumDrive1.driveCartesian(yValue, xValue, zValue);
    }
    public void autoDriveBack(){
      m_frontLeftMotor.set(-0.5);
      m_rearLeftMotor.set(-0.5);
      m_frontRightMotor.set(-0.5);
      m_rearRightMotor.set(-0.5);
    }
    public void driveStop(){
      m_frontLeftMotor.set(0);
      m_rearLeftMotor.set(0);
      m_frontRightMotor.set(0);
      m_rearRightMotor.set(0);
    }
  

}
  
